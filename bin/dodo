#!/usr/bin/env python
#######################################################################
# Copyright (c) 2013 Adam Wisniewski, http://adamw523.com
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import getopt
import inspect
import os
import sys

try:
    import dodo
except ImportError:
    # Add to path if running during development
    filename = inspect.getframeinfo(inspect.currentframe()).filename
    path = os.path.join(os.path.dirname( os.path.abspath(filename) ), '../')
    sys.path.append(path)
    import dodo

OUTPUT_COLUMNS = {  'regions':  [['id', 5], ['name', 30]],
                    'sizes':    [['id', 5], ['size', 30]],
                    'images':   [['id', 5], ['distribution', 20], ['name', 30]]
        }

def usage():
    u = """
usage here
line two
"""
    print u

def print_list(list_type, items):
    columns = OUTPUT_COLUMNS[list_type]
    row_len = sum([c[1] + 1 for c in columns])

    # print column headers
    for column in columns:
        print column[0][:column[1]].ljust(column[1]),
    print

    # print divider
    print '-' * row_len

    # print list items
    for row in items:
        for column in columns:
            # print row, column[0]
            value = str(row[column[0]])
            print value[:column[1] - 1].ljust(column[1]),

        print




########################################
# Commands

def droplets(opts):
    pass

def images(opts):
    conn = dodo.connect()
    if opts['filter']:
        images = conn.images(opts['filter'])
    else:
        images = conn.images()
    print_list('images', images)

def regions(opts):
    conn = dodo.connect()
    regions = conn.regions()
    print_list('regions', regions)

def ssh_keys(opts):
    pass

def sizes(opts):
    conn = dodo.connect()
    regions = conn.sizes()
    print_list('regions', regions)

########################################
# main

def main():
    try:
        options = ['droplet_id=', 'filter=', 'image_id', 'name=', 'region_id',
                    'size_id', 'ssh_key_ids', 'ssh_key_pub']
        command = sys.argv[1]
        argv = sys.argv[2:]
        opts, args = getopt.getopt(argv, '', options)
        opts = dict(((opt[0][2:], opt[1]) for opt in opts))
    except Exception as e:
        print e
        usage()
        sys.exit(2)

    if command == 'droplets': droplets(opts)
    elif command == 'images': images(opts)
    elif command == 'regions': regions(opts)
    elif command == 'ssh_keys': ssh_keys(opts)
    elif command == 'sizes': sizes(opts)
    else: usage()

if __name__ == "__main__":
    main()

